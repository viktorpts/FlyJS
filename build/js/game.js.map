{"version":3,"sources":["../../js/game.js"],"names":["Game","constructor","renderer","input","socket","player","scene","addObject","populate","lastFrame","addPlayer","id","removePlayer","dynamic","filter","p","forEach","alive","updatePosition","players","x","y","direction","attachEventListeners","emitter","start","main","timestamp","delta","applyInput","update","draw","drawControls","emit","requestAnimationFrame","bind"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,MAAMA,IAAN,CAAW;AACtBC,gBAAYC,QAAZ,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACjC,aAAKA,MAAL,GAAcA,MAAd;;AAEA,aAAKF,QAAL,GAAgBA,QAAhB;AACA,aAAKC,KAAL,GAAaA,KAAb;AACA,aAAKE,MAAL,GAAc,sBAAd;AACA,aAAKC,KAAL,GAAa,qBAAb;AACA,aAAKA,KAAL,CAAWC,SAAX,CAAqB,KAAKF,MAA1B;AACA,6BAAUG,QAAV,CAAmB,KAAKF,KAAxB;;AAEA,aAAKG,SAAL,GAAiB,KAAjB;AACH;;AAEDC,cAAUC,EAAV,EAAc;AACV,YAAIN,SAAS,qBAAWM,EAAX,CAAb;AACA;AACA,aAAKL,KAAL,CAAWC,SAAX,CAAqBF,MAArB;AACH;;AAEDO,iBAAaD,EAAb,EAAiB;AACb,aAAKL,KAAL,CAAWO,OAAX,CAAmBC,MAAnB,CAA0BC,KAAKA,EAAEJ,EAAF,IAAQA,EAAvC,EAA2CK,OAA3C,CAAmDD,KAAKA,EAAEE,KAAF,GAAU,KAAlE;AACH;;AAEDC,mBAAeC,OAAf,EAAwB;AACpB,aAAKb,KAAL,CAAWO,OAAX,CAAmBC,MAAnB,CAA0BC,KAAKA,6BAA/B,EAAoDC,OAApD,CAA4DD,KAAK;AAC7D,gBAAII,QAAQJ,EAAEJ,EAAV,CAAJ,EAAmB;AACfI,kBAAEK,CAAF,GAAMD,QAAQJ,EAAEJ,EAAV,EAAcS,CAApB;AACAL,kBAAEM,CAAF,GAAMF,QAAQJ,EAAEJ,EAAV,EAAcU,CAApB;AACAN,kBAAEO,SAAF,GAAcH,QAAQJ,EAAEJ,EAAV,EAAcW,SAA5B;AACH;AACJ,SAND;AAOH;;AAEDC,yBAAqBC,OAArB,EAA8B;AAC1B,aAAKrB,KAAL,CAAWoB,oBAAX,CAAgCC,OAAhC;AACH;;AAEDC,YAAQ;AACJ,aAAKC,IAAL;AACH;;AAEDA,SAAKC,SAAL,EAAgB;AACZ,YAAI,CAAC,KAAKlB,SAAV,EAAqB,KAAKA,SAAL,GAAiBkB,SAAjB;AACrB,YAAIC,QAAQD,YAAY,KAAKlB,SAA7B;;AAEA,aAAKN,KAAL,CAAW0B,UAAX,CAAsB,KAAKxB,MAA3B;;AAEA;AACA,eAAOuB,SAAS,EAAhB,EAAoB;AAChBA,qBAAS,EAAT;AACA,iBAAKtB,KAAL,CAAWwB,MAAX;AACA,iBAAKrB,SAAL,GAAiBkB,SAAjB;AACH;AACD,aAAKzB,QAAL,CAAc6B,IAAd,CAAmB,KAAKzB,KAAxB,EAA+B,MAAI,KAAKD,MAAL,CAAYe,CAA/C,EAAkD,MAAI,KAAKf,MAAL,CAAYgB,CAAlE;AACA,aAAKnB,QAAL,CAAc8B,YAAd,CAA2B,KAAK7B,KAAhC;;AAEA;AACA,aAAKC,MAAL,CAAY6B,IAAZ,CAAiB,QAAjB,EAA2B,EAACb,GAAG,KAAKf,MAAL,CAAYe,CAAhB,EAAmBC,GAAG,KAAKhB,MAAL,CAAYgB,CAAlC,EAAqCC,WAAW,KAAKjB,MAAL,CAAYiB,SAA5D,EAA3B;;AAEAY,8BAAsB,KAAKR,IAAL,CAAUS,IAAV,CAAe,IAAf,CAAtB;AACH;AA7DqB;kBAALnC,I","file":"game.js","sourcesContent":["import Player from './objects/dynamic/Player.js';\r\nimport Scene from './objects/Scene.js';\r\nimport Generator from './level-maker.js';\r\nimport Environment from './enums/Environment.js';\r\n\r\nexport default class Game {\r\n    constructor(renderer, input, socket) {\r\n        this.socket = socket;\r\n\r\n        this.renderer = renderer;\r\n        this.input = input;\r\n        this.player = new Player();\r\n        this.scene = new Scene();\r\n        this.scene.addObject(this.player);\r\n        Generator.populate(this.scene);\r\n\r\n        this.lastFrame = false;\r\n    }\r\n\r\n    addPlayer(id) {\r\n        let player = new Player(id);\r\n        //player.physics = null;\r\n        this.scene.addObject(player);\r\n    }\r\n\r\n    removePlayer(id) {\r\n        this.scene.dynamic.filter(p => p.id == id).forEach(p => p.alive = false);\r\n    }\r\n\r\n    updatePosition(players) {\r\n        this.scene.dynamic.filter(p => p instanceof Player).forEach(p => {\r\n            if (players[p.id]) {\r\n                p.x = players[p.id].x;\r\n                p.y = players[p.id].y;\r\n                p.direction = players[p.id].direction;\r\n            }\r\n        });\r\n    }\r\n\r\n    attachEventListeners(emitter) {\r\n        this.input.attachEventListeners(emitter);\r\n    }\r\n\r\n    start() {\r\n        this.main();\r\n    }\r\n\r\n    main(timestamp) {\r\n        if (!this.lastFrame) this.lastFrame = timestamp;\r\n        let delta = timestamp - this.lastFrame;\r\n\r\n        this.input.applyInput(this.player);\r\n\r\n        // Check physics step\r\n        while (delta >= 15) {\r\n            delta -= 15;\r\n            this.scene.update();\r\n            this.lastFrame = timestamp;\r\n        }\r\n        this.renderer.draw(this.scene, 400-this.player.x, 300-this.player.y);\r\n        this.renderer.drawControls(this.input);\r\n\r\n        // Transmit our position\r\n        this.socket.emit('newPos', {x: this.player.x, y: this.player.y, direction: this.player.direction});\r\n\r\n        requestAnimationFrame(this.main.bind(this));\r\n    }\r\n}"]}