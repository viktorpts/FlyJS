{"version":3,"sources":["../../js/server.js"],"names":["express","require","app","server","Server","path","get","req","res","sendFile","join","__dirname","use","static","io","CONNECTIONS","Map","PLAYERS","sockets","on","socket","set","id","player","x","y","direction","broadcast","emit","Array","from","keys","forEach","p","console","log","data","delete","listen","setInterval","update","packet","entries","kvp"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,MAAMF,SAAV;AACA,IAAIG,SAASF,QAAQ,MAAR,EAAgBG,MAAhB,CAAuBF,GAAvB,CAAb;AACA,IAAIG,OAAOJ,QAAQ,MAAR,CAAX;;AAEAC,IAAII,GAAJ,CAAQ,GAAR,EAAa,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC7BA,QAAIC,QAAJ,CAAa,aAAb,EAA4B,EAAC,QAAQJ,KAAKK,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAT,EAA5B;AACH,CAFD;AAGAT,IAAIU,GAAJ,CAAQ,6BAAR,EAAuCZ,QAAQa,MAAR,CAAeR,KAAKK,IAAL,CAAUC,SAAV,EAAqB,QAArB,IAAiC,6BAAhD,CAAvC;AACAT,IAAIU,GAAJ,CAAQ,WAAR,EAAqBZ,QAAQa,MAAR,CAAeR,KAAKK,IAAL,CAAUC,SAAV,EAAqB,QAArB,IAAiC,WAAhD,CAArB;AACAT,IAAIU,GAAJ,CAAQ,MAAR,EAAgBZ,QAAQa,MAAR,CAAeR,KAAKK,IAAL,CAAUC,SAAV,EAAqB,QAArB,IAAiC,MAAhD,CAAhB;;AAEA,IAAIG,KAAKb,QAAQ,WAAR,EAAqBE,MAArB,CAAT;;AAEA,IAAIY,cAAc,IAAIC,GAAJ,EAAlB;AACA,IAAIC,UAAU,IAAID,GAAJ,EAAd;;AAEAF,GAAGI,OAAH,CAAWC,EAAX,CAAc,YAAd,EAA4B,UAAUC,MAAV,EAAkB;AAC1CL,gBAAYM,GAAZ,CAAgBD,OAAOE,EAAvB,EAA2BF,MAA3B;AACA,QAAIG,SAAS,EAACC,GAAG,CAAJ,EAAOC,GAAG,CAAV,EAAaC,WAAW,CAAxB,EAAb;AACA;AACAN,WAAOO,SAAP,CAAiBC,IAAjB,CAAsB,WAAtB,EAAmC,EAACN,IAAIF,OAAOE,EAAZ,EAAnC;AACA;AACAO,UAAMC,IAAN,CAAWb,QAAQc,IAAR,EAAX,EAA2BC,OAA3B,CAAmCC,KAAK;AACpCb,eAAOQ,IAAP,CAAY,WAAZ,EAAyB,EAACN,IAAIW,CAAL,EAAzB;AACH,KAFD;AAGA;AACAhB,YAAQI,GAAR,CAAYD,OAAOE,EAAnB,EAAuBC,MAAvB;;AAEA;AACAW,YAAQC,GAAR,CAAY,8BAA8Bf,OAAOE,EAAjD;AACAY,YAAQC,GAAR,CAAYlB,OAAZ;;AAEA;AACAG,WAAOD,EAAP,CAAU,YAAV,EAAwB,UAAUiB,IAAV,EAAgB;AACpCrB,oBAAYsB,MAAZ,CAAmBjB,OAAOE,EAA1B;AACAL,gBAAQoB,MAAR,CAAejB,OAAOE,EAAtB;AACAF,eAAOO,SAAP,CAAiBC,IAAjB,CAAsB,YAAtB,EAAoC,EAACN,IAAIF,OAAOE,EAAZ,EAApC;AACAY,gBAAQC,GAAR,CAAY,YAAYf,OAAOE,EAAnB,GAAwB,eAApC;AACH,KALD;;AAOAF,WAAOD,EAAP,CAAU,QAAV,EAAoB,UAAUiB,IAAV,EAAgB;AAChCb,eAAOC,CAAP,GAAWY,KAAKZ,CAAhB;AACAD,eAAOE,CAAP,GAAWW,KAAKX,CAAhB;AACAF,eAAOG,SAAP,GAAmBU,KAAKV,SAAxB;AACH,KAJD;AAKH,CA7BD;;AA+BAvB,OAAOmC,MAAP,CAAc,IAAd;;AAEAC,YAAYC,MAAZ,EAAoB,EAApB;;AAEA,SAASA,MAAT,GAAkB;AACd,QAAIC,SAAS,EAAb;AACAZ,UAAMC,IAAN,CAAWb,QAAQyB,OAAR,EAAX,EAA8BV,OAA9B,CAAsCW,OAAOF,OAAOE,IAAI,CAAJ,CAAP,IAAiBA,IAAI,CAAJ,CAA9D;AACA7B,OAAGc,IAAH,CAAQ,WAAR,EAAqBa,MAArB;AACH","file":"server.js","sourcesContent":["let express = require('express');\r\nlet app = express();\r\nlet server = require('http').Server(app);\r\nlet path = require('path');\r\n\r\napp.get('/', function (req, res) {\r\n    res.sendFile('/index.html', {'root': path.join(__dirname, '/../..')});\r\n});\r\napp.use('/node_modules/systemjs/dist', express.static(path.join(__dirname, '/../..') + '/node_modules/systemjs/dist'));\r\napp.use('/build/js', express.static(path.join(__dirname, '/../..') + '/build/js'));\r\napp.use('/src', express.static(path.join(__dirname, '/../..') + '/src'));\r\n\r\nlet io = require('socket.io')(server);\r\n\r\nlet CONNECTIONS = new Map();\r\nlet PLAYERS = new Map();\r\n\r\nio.sockets.on('connection', function (socket) {\r\n    CONNECTIONS.set(socket.id, socket);\r\n    let player = {x: 0, y: 0, direction: 0};\r\n    // Broadcast to other players\r\n    socket.broadcast.emit('newPlayer', {id: socket.id});\r\n    // Add existing players\r\n    Array.from(PLAYERS.keys()).forEach(p => {\r\n        socket.emit('newPlayer', {id: p});\r\n    });\r\n    // Add to local pool\r\n    PLAYERS.set(socket.id, player);\r\n\r\n    // Report active connections\r\n    console.log('Client connected with ID ' + socket.id);\r\n    console.log(PLAYERS);\r\n\r\n    // Attach packet listeners\r\n    socket.on('disconnect', function (data) {\r\n        CONNECTIONS.delete(socket.id);\r\n        PLAYERS.delete(socket.id);\r\n        socket.broadcast.emit('playerLeft', {id: socket.id});\r\n        console.log('Client ' + socket.id + ' disconnected');\r\n    });\r\n\r\n    socket.on('newPos', function (data) {\r\n        player.x = data.x;\r\n        player.y = data.y;\r\n        player.direction = data.direction;\r\n    });\r\n});\r\n\r\nserver.listen(3000);\r\n\r\nsetInterval(update, 15);\r\n\r\nfunction update() {\r\n    let packet = {};\r\n    Array.from(PLAYERS.entries()).forEach(kvp => packet[kvp[0]] = kvp[1]);\r\n    io.emit('playerPos', packet);\r\n}"]}